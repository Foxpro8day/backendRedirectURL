const express = require("express");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcrypt");
const db = require("./models");
const User = db.User;
const Url = db.Url;
const router = express.Router();
const authenticateToken = require("./middleware")

// ƒêƒÉng k√Ω ng∆∞·ªùi d√πng
router.post("/register", async (req, res) => {
  try {
    const { username, password } = req.body;
    if (!username || !password)
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin!" });

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = await User.create({ username, password: hashedPassword });
    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!", user: newUser });
  } catch (error) {
    console.error("L·ªói khi t·∫°o ng∆∞·ªùi d√πng:", error);
    res.status(500).json({ message: "L·ªói khi t·∫°o ng∆∞·ªùi d√πng" });
  }
});

// ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
router.post("/login", async (req, res) => {
  console.log(req.body);
  try {
    const { username, password } = req.body;
    if (!username || !password)
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin!" });

    const user = await User.findOne({
      where: { username },
      attributes: ["userId", "username", "password", "role"], // ‚úÖ ƒê·∫£m b·∫£o l·∫•y `id`
    });

    if (!user)
      return res.status(401).json({ message: "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!" });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch)
      return res.status(401).json({ message: "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!" });

    const token = jwt.sign(
      { userId: user.userId, username: user.username, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );
    res.json({ token, role: user.role });
  } catch (error) {
    console.error("L·ªói khi ƒëƒÉng nh·∫≠p:", error);
    res.status(500).json({ message: "L·ªói khi ƒëƒÉng nh·∫≠p!" });
  }
});

// T·∫°o URL r√∫t g·ªçn
router.post("/add", authenticateToken, async (req, res) => {
  try {
    const { short_code, target_url } = req.body;
    const domain = "move.8dslink.com"; // T√™n mi·ªÅn c·ªë ƒë·ªãnh
    const userId = req.user.userId;
    console.log("üë§ userId t·ª´ token:", userId); // Debug log

    if (!short_code || !target_url) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin!" });
    }

    // Ki·ªÉm tra n·∫øu short_code ƒë√£ t·ªìn t·∫°i
    const existingUrl = await Url.findOne({ where: { short_code } });
    if (existingUrl) {
      return res.status(400).json({ message: "Short code ƒë√£ t·ªìn t·∫°i!" });
    }

    await Url.create({
      short_code,
      target_url,
      userId,
    });

    res.status(201).json({
      message: "T·∫°o link th√†nh c√¥ng!",
      short_url: `${domain}/${short_code}`,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o link r√∫t g·ªçn:", error);
    res.status(500).json({ message: "L·ªói server khi t·∫°o link r√∫t g·ªçn" });
  }
});

// L·∫•y danh s√°ch t·∫•t c·∫£ c√°c link
router.get("/links", authenticateToken, async (req, res) => {
  try {
    console.log("üî• API /api/links ƒë∆∞·ª£c g·ªçi"); // Debug log
    const links = await Url.findAll({
      attributes: ["urlId", "short_code", "target_url", "userId"],
    });
    console.log(links.length);

    if (!links || links.length === 0) {
      console.log("‚ùå Kh√¥ng t√¨m th·∫•y URL trong database");
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y URL" });
    }

    console.log("‚úÖ S·ªë l∆∞·ª£ng link l·∫•y ƒë∆∞·ª£c:", links.length);
    res.json({ links });
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch link:", error);
    res.status(500).json({
      message: "L·ªói server khi l·∫•y danh s√°ch link",
    });
  }
});

// Chuy·ªÉn h∆∞·ªõng URL
router.get("/:shortCode", async (req, res) => {
  try {
    const { shortCode } = req.params;
    console.log(`üî• Ng∆∞·ªùi d√πng truy c·∫≠p: ${shortCode}`);

    const url = await Url.findOne({
      where: { short_code: shortCode },
    });

    if (!url) {
      console.log("‚ùå Kh√¥ng t√¨m th·∫•y URL");
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y URL" });
    }

    console.log(`üîó Chuy·ªÉn h∆∞·ªõng t·ªõi: ${url.target_url}`);
    res.redirect(url.target_url);
  } catch (error) {
    console.error("‚ùå L·ªói khi chuy·ªÉn h∆∞·ªõng:", error);
    res.status(500).json({ message: "L·ªói server khi chuy·ªÉn h∆∞·ªõng" });
  }
});

module.exports = router;
